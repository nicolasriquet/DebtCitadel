# Generated by Django 4.1.11 on 2023-11-04 15:05

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_extensions.db.fields
import dojo.models
import tagulous.models.fields
import tagulous.models.models


class Migration(migrations.Migration):

    dependencies = [
        ('dojo', '0190_system_settings_experimental_fp_history'),
    ]

    operations = [
        migrations.CreateModel(
            name='Debt_Context',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.CharField(max_length=4000)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('tid', models.IntegerField(default=0, editable=False)),
                ('prod_numeric_grade', models.IntegerField(blank=True, null=True)),
                ('business_criticality', models.CharField(blank=True, choices=[('very high', 'Very High'), ('high', 'High'), ('medium', 'Medium'), ('low', 'Low'), ('very low', 'Very Low'), ('none', 'None')], max_length=9, null=True)),
                ('platform', models.CharField(blank=True, choices=[('web service', 'API'), ('desktop', 'Desktop'), ('iot', 'Internet of Things'), ('mobile', 'Mobile'), ('web', 'Web')], max_length=11, null=True)),
                ('lifecycle', models.CharField(blank=True, choices=[('construction', 'Construction'), ('production', 'Production'), ('retirement', 'Retirement')], max_length=12, null=True)),
                ('origin', models.CharField(blank=True, choices=[('third party library', 'Third Party Library'), ('purchased', 'Purchased'), ('contractor', 'Contractor Developed'), ('internal', 'Internally Developed'), ('open source', 'Open Source'), ('outsourced', 'Outsourced')], max_length=19, null=True)),
                ('user_records', models.PositiveIntegerField(blank=True, help_text='Estimate the number of user records within the application.', null=True)),
                ('revenue', models.DecimalField(blank=True, decimal_places=2, help_text="Estimate the application's revenue.", max_digits=15, null=True)),
                ('external_audience', models.BooleanField(default=False, help_text='Specify if the application is used by people outside the organization.')),
                ('internet_accessible', models.BooleanField(default=False, help_text='Specify if the application is accessible from the public internet.')),
                ('enable_product_tag_inheritance', models.BooleanField(default=False, help_text='Enables debt context tag inheritance. Any tags added on a product will automatically be added to all Engagements, Tests, and Findings', verbose_name='Enable Debt Context Tag Inheritance')),
                ('enable_simple_risk_acceptance', models.BooleanField(default=False, help_text='Allows simple risk acceptance by checking/unchecking a checkbox.')),
                ('enable_full_risk_acceptance', models.BooleanField(default=True, help_text='Allows full risk acceptance using a risk acceptance form, expiration date, uploaded proof, etc.')),
                ('disable_sla_breach_notifications', models.BooleanField(default=False, help_text='Disable SLA breach notifications if configured in the global settings', verbose_name='Disable SLA breach notifications')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Debt_Context_Line',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
                ('description', models.CharField(max_length=2000)),
            ],
        ),
        migrations.CreateModel(
            name='Debt_Context_Type',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.CharField(blank=True, max_length=4000, null=True)),
                ('critical_context', models.BooleanField(default=False)),
                ('key_debt_context', models.BooleanField(default=False)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Debt_Endpoint_Status',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=dojo.models.get_current_date)),
                ('last_modified', models.DateTimeField(default=dojo.models.get_current_datetime, editable=False, null=True)),
                ('mitigated', models.BooleanField(blank=True, default=False)),
                ('mitigated_time', models.DateTimeField(blank=True, editable=False, null=True)),
                ('false_positive', models.BooleanField(blank=True, default=False)),
                ('out_of_scope', models.BooleanField(blank=True, default=False)),
                ('risk_accepted', models.BooleanField(blank=True, default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Debt_Item',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='A short description of the flaw.', max_length=511, verbose_name='Title')),
                ('date', models.DateField(default=dojo.models.get_current_date, help_text='The date the flaw was discovered.', verbose_name='Date')),
                ('sla_start_date', models.DateField(blank=True, help_text="(readonly)The date used as start date for SLA calculation. Set by expiring risk acceptances. Empty by default, causing a fallback to 'date'.", null=True, verbose_name='SLA Start Date')),
                ('cwe', models.IntegerField(blank=True, default=0, help_text='The CWE number associated with this flaw.', null=True, verbose_name='CWE')),
                ('cve', models.CharField(help_text='An id of a vulnerability in a security advisory associated with this finding. Can be a Common Vulnerabilities and Exposures (CVE) or from other sources.', max_length=50, null=True, verbose_name='Vulnerability Id')),
                ('cvssv3', models.TextField(help_text='Common Vulnerability Scoring System version 3 (CVSSv3) score associated with this flaw.', max_length=117, null=True, validators=[django.core.validators.RegexValidator(message="CVSS must be entered in format: 'AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H'", regex='^AV:[NALP]|AC:[LH]|PR:[UNLH]|UI:[NR]|S:[UC]|[CIA]:[NLH]')], verbose_name='CVSS v3')),
                ('cvssv3_score', models.FloatField(blank=True, help_text='Numerical CVSSv3 score for the vulnerability. If the vector is given, the score is updated while saving the finding', null=True, verbose_name='CVSSv3 score')),
                ('url', models.TextField(blank=True, editable=False, help_text='External reference that provides more information about this flaw.', null=True, verbose_name='URL')),
                ('severity', models.CharField(help_text='The severity level of this flaw (Critical, High, Medium, Low, Informational).', max_length=200, verbose_name='Severity')),
                ('description', models.TextField(help_text='Longer more descriptive information about the flaw.', verbose_name='Description')),
                ('mitigation', models.TextField(blank=True, help_text='Text describing how to best fix the flaw.', null=True, verbose_name='Mitigation')),
                ('impact', models.TextField(blank=True, help_text='Text describing the impact this flaw has on systems, products, enterprise, etc.', null=True, verbose_name='Impact')),
                ('steps_to_reproduce', models.TextField(blank=True, help_text='Text describing the steps that must be followed in order to reproduce the flaw / bug.', null=True, verbose_name='Steps to Reproduce')),
                ('severity_justification', models.TextField(blank=True, help_text='Text describing why a certain severity was associated with this flaw.', null=True, verbose_name='Severity Justification')),
                ('references', models.TextField(blank=True, db_column='refs', help_text='The external documentation available for this flaw.', null=True, verbose_name='References')),
                ('active', models.BooleanField(default=True, help_text='Denotes if this flaw is active or not.', verbose_name='Active')),
                ('verified', models.BooleanField(default=False, help_text='Denotes if this flaw has been manually verified by the tester.', verbose_name='Verified')),
                ('false_p', models.BooleanField(default=False, help_text='Denotes if this flaw has been deemed a false positive by the tester.', verbose_name='False Positive')),
                ('duplicate', models.BooleanField(default=False, help_text='Denotes if this flaw is a duplicate of other flaws reported.', verbose_name='Duplicate')),
                ('out_of_scope', models.BooleanField(default=False, help_text='Denotes if this flaw falls outside the scope of the test and/or engagement.', verbose_name='Out Of Scope')),
                ('risk_accepted', models.BooleanField(default=False, help_text='Denotes if this debt item has been marked as an accepted risk.', verbose_name='Risk Accepted')),
                ('under_review', models.BooleanField(default=False, help_text='Denotes is this flaw is currently being reviewed.', verbose_name='Under Review')),
                ('last_status_update', models.DateTimeField(auto_now_add=True, help_text='Timestamp of latest status update (change in status related fields).', null=True, verbose_name='Last Status Update')),
                ('under_defect_review', models.BooleanField(default=False, help_text='Denotes if this debt item is under defect review.', verbose_name='Under Defect Review')),
                ('is_mitigated', models.BooleanField(default=False, help_text='Denotes if this flaw has been fixed.', verbose_name='Is Mitigated')),
                ('thread_id', models.IntegerField(default=0, editable=False, verbose_name='Thread ID')),
                ('mitigated', models.DateTimeField(blank=True, editable=False, help_text='Denotes if this flaw has been fixed by storing the date it was fixed.', null=True, verbose_name='Mitigated')),
                ('numerical_severity', models.CharField(help_text='The numerical representation of the severity (S0, S1, S2, S3, S4).', max_length=4, verbose_name='Numerical Severity')),
                ('last_reviewed', models.DateTimeField(editable=False, help_text="Provides the date the flaw was last 'touched' by a tester.", null=True, verbose_name='Last Reviewed')),
                ('param', models.TextField(blank=True, editable=False, help_text='Parameter used to trigger the issue (DAST).', null=True, verbose_name='Parameter')),
                ('payload', models.TextField(blank=True, editable=False, help_text='Payload used to attack the service / application and trigger the bug / problem.', null=True, verbose_name='Payload')),
                ('hash_code', models.CharField(blank=True, editable=False, help_text='A hash over a configurable set of fields that is used for findings deduplication.', max_length=64, null=True, verbose_name='Hash Code')),
                ('line', models.IntegerField(blank=True, help_text='Source line number of the attack vector.', null=True, verbose_name='Line number')),
                ('file_path', models.CharField(blank=True, help_text='Identified file(s) containing the flaw.', max_length=4000, null=True, verbose_name='File path')),
                ('component_name', models.CharField(blank=True, help_text='Name of the affected component (library name, part of a system, ...).', max_length=200, null=True, verbose_name='Component name')),
                ('component_version', models.CharField(blank=True, help_text='Version of the affected component.', max_length=100, null=True, verbose_name='Component version')),
                ('static_finding', models.BooleanField(default=False, help_text='Flaw has been detected from a Static Application Security Testing tool (SAST).', verbose_name='Static finding (SAST)')),
                ('dynamic_finding', models.BooleanField(default=True, help_text='Flaw has been detected from a Dynamic Application Security Testing tool (DAST).', verbose_name='Dynamic finding (DAST)')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='The date the finding was created inside DefectDojo.', null=True, verbose_name='Created')),
                ('scanner_confidence', models.IntegerField(blank=True, default=None, editable=False, help_text='Confidence level of vulnerability which is supplied by the scanner.', null=True, verbose_name='Scanner confidence')),
                ('unique_id_from_tool', models.CharField(blank=True, help_text='Vulnerability technical id from the source tool. Allows to track unique vulnerabilities.', max_length=500, null=True, verbose_name='Unique ID from tool')),
                ('vuln_id_from_tool', models.CharField(blank=True, help_text='Non-unique technical id from the source tool associated with the vulnerability type.', max_length=500, null=True, verbose_name='Vulnerability ID from tool')),
                ('sast_source_object', models.CharField(blank=True, help_text='Source object (variable, function...) of the attack vector.', max_length=500, null=True, verbose_name='SAST Source Object')),
                ('sast_sink_object', models.CharField(blank=True, help_text='Sink object (variable, function...) of the attack vector.', max_length=500, null=True, verbose_name='SAST Sink Object')),
                ('sast_source_line', models.IntegerField(blank=True, help_text='Source line number of the attack vector.', null=True, verbose_name='SAST Source Line number')),
                ('sast_source_file_path', models.CharField(blank=True, help_text='Source file path of the attack vector.', max_length=4000, null=True, verbose_name='SAST Source File Path')),
                ('nb_occurences', models.IntegerField(blank=True, help_text='Number of occurences in the source tool when several vulnerabilites were found and aggregated by the scanner.', null=True, verbose_name='Number of occurences')),
                ('publish_date', models.DateField(blank=True, help_text='Date when this vulnerability was made publicly available.', null=True, verbose_name='Publish date')),
                ('service', models.CharField(blank=True, help_text='A service is a self-contained piece of functionality within a Product. This is an optional field which is used in deduplication of findings when set.', max_length=200, null=True, verbose_name='Service')),
                ('planned_remediation_date', models.DateField(help_text='The date the flaw is expected to be remediated.', null=True, verbose_name='Planned Remediation Date')),
                ('planned_remediation_version', models.CharField(blank=True, help_text='The target version when the vulnerability should be fixed / remediated', max_length=99, null=True, verbose_name='Planned remediation version')),
                ('effort_for_fixing', models.CharField(blank=True, help_text='Effort for debt item / remediating the vulnerability (Low, Medium, High)', max_length=99, null=True, verbose_name='Effort for fixing')),
                ('defect_review_requested_by', models.ForeignKey(blank=True, help_text='Documents who requested a defect review for this flaw.', null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='debt_defect_review_requested_by', to='dojo.dojo_user', verbose_name='Defect Review Requested By')),
                ('duplicate_debt_item', models.ForeignKey(blank=True, editable=False, help_text='Link to the original debt item if this debt item is a duplicate.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='original_debt_item', to='dojo.debt_item', verbose_name='Duplicate Debt Item')),
                ('endpoints', models.ManyToManyField(blank=True, help_text='The hosts within the product that are susceptible to this flaw. + The status of the endpoint associated with this flaw (Vulnerable, Mitigated, ...).', through='dojo.Debt_Endpoint_Status', to='dojo.endpoint', verbose_name='Endpoints')),
                ('files', models.ManyToManyField(blank=True, editable=False, help_text='Files(s) related to the flaw.', to='dojo.fileupload', verbose_name='Files')),
                ('found_by', models.ManyToManyField(editable=False, help_text='The name of the scanner that identified the flaw.', to='dojo.test_type', verbose_name='Found by')),
            ],
            options={
                'ordering': ('numerical_severity', '-date', 'title'),
            },
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='special_character_required',
            field=models.BooleanField(default=True, help_text='Requires user passwords to contain at least one special character (()[]{}|\\`~!@#$%^&*_-+=;:\\\'\\",<>./?).', verbose_name='Password must contain one special character'),
        ),
        migrations.CreateModel(
            name='Tagulous_Debt_Item_Template_tags',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('slug', models.SlugField()),
                ('count', models.IntegerField(default=0, help_text='Internal counter of how many times this tag is in use')),
                ('protected', models.BooleanField(default=False, help_text='Will not be deleted when the count reaches 0')),
            ],
            options={
                'ordering': ('name',),
                'abstract': False,
                'unique_together': {('slug',)},
            },
            bases=(tagulous.models.models.BaseTagModel, models.Model),
        ),
        migrations.CreateModel(
            name='Tagulous_Debt_Item_tags',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('slug', models.SlugField()),
                ('count', models.IntegerField(default=0, help_text='Internal counter of how many times this tag is in use')),
                ('protected', models.BooleanField(default=False, help_text='Will not be deleted when the count reaches 0')),
            ],
            options={
                'ordering': ('name',),
                'abstract': False,
                'unique_together': {('slug',)},
            },
            bases=(tagulous.models.models.BaseTagModel, models.Model),
        ),
        migrations.CreateModel(
            name='Tagulous_Debt_Item_inherited_tags',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('slug', models.SlugField()),
                ('count', models.IntegerField(default=0, help_text='Internal counter of how many times this tag is in use')),
                ('protected', models.BooleanField(default=False, help_text='Will not be deleted when the count reaches 0')),
            ],
            options={
                'ordering': ('name',),
                'abstract': False,
                'unique_together': {('slug',)},
            },
            bases=(tagulous.models.models.BaseTagModel, models.Model),
        ),
        migrations.CreateModel(
            name='Tagulous_Debt_Context_tags',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('slug', models.SlugField()),
                ('count', models.IntegerField(default=0, help_text='Internal counter of how many times this tag is in use')),
                ('protected', models.BooleanField(default=False, help_text='Will not be deleted when the count reaches 0')),
            ],
            options={
                'ordering': ('name',),
                'abstract': False,
                'unique_together': {('slug',)},
            },
            bases=(tagulous.models.models.BaseTagModel, models.Model),
        ),
        migrations.CreateModel(
            name='Debt_Item_Template',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField(max_length=1000)),
                ('cwe', models.IntegerField(blank=True, default=None, null=True)),
                ('cve', models.CharField(help_text='An id of a vulnerability in a security advisory associated with this finding. Can be a Common Vulnerabilities and Exposures (CVE) or from other sources.', max_length=50, null=True, verbose_name='Vulnerability Id')),
                ('cvssv3', models.TextField(max_length=117, null=True, validators=[django.core.validators.RegexValidator(message="CVSS must be entered in format: 'AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H'", regex='^AV:[NALP]|AC:[LH]|PR:[UNLH]|UI:[NR]|S:[UC]|[CIA]:[NLH]')])),
                ('severity', models.CharField(blank=True, max_length=200, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('mitigation', models.TextField(blank=True, null=True)),
                ('impact', models.TextField(blank=True, null=True)),
                ('references', models.TextField(blank=True, db_column='refs', null=True)),
                ('last_used', models.DateTimeField(editable=False, null=True)),
                ('numerical_severity', models.CharField(blank=True, editable=False, max_length=4, null=True)),
                ('template_match', models.BooleanField(default=False, help_text='Enables this template for matching remediation advice. Match will be applied to all active, verified findings by CWE.', verbose_name='Template Match Enabled')),
                ('template_match_title', models.BooleanField(default=False, help_text='Matches by title text (contains search) and CWE.', verbose_name='Match Template by Title and CWE')),
                ('tags', tagulous.models.fields.TagField(_set_tag_meta=True, blank=True, force_lowercase=True, help_text='Add tags that help describe this finding template. Choose from the list or add new tags. Press Enter key to add.', to='dojo.tagulous_debt_item_template_tags')),
            ],
            options={
                'ordering': ['-cwe'],
            },
        ),
        migrations.CreateModel(
            name='Debt_Item_Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('name', models.CharField(max_length=255)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='dojo.dojo_user')),
                ('debt_items', models.ManyToManyField(to='dojo.debt_item')),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dojo.test')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.AddField(
            model_name='debt_item',
            name='inherited_tags',
            field=tagulous.models.fields.TagField(_set_tag_meta=True, blank=True, force_lowercase=True, help_text='Internal use tags sepcifically for maintaining parity with product. This field will be present as a subset in the tags field', to='dojo.tagulous_debt_item_inherited_tags'),
        ),
        migrations.AddField(
            model_name='debt_item',
            name='last_reviewed_by',
            field=models.ForeignKey(editable=False, help_text='Provides the person who last reviewed the flaw.', null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='debt_last_reviewed_by', to='dojo.dojo_user', verbose_name='Last Reviewed By'),
        ),
        migrations.AddField(
            model_name='debt_item',
            name='mitigated_by',
            field=models.ForeignKey(editable=False, help_text='Documents who has marked this flaw as fixed.', null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='debt_mitigated_by', to='dojo.dojo_user', verbose_name='Mitigated By'),
        ),
        migrations.AddField(
            model_name='debt_item',
            name='notes',
            field=models.ManyToManyField(blank=True, editable=False, help_text='Stores information pertinent to the flaw or the mitigation.', to='dojo.notes', verbose_name='Notes'),
        ),
        migrations.AddField(
            model_name='debt_item',
            name='reporter',
            field=models.ForeignKey(default=1, editable=False, help_text='Documents who reported the flaw.', on_delete=django.db.models.deletion.RESTRICT, related_name='debt_reporter', to='dojo.dojo_user', verbose_name='Reporter'),
        ),
        migrations.AddField(
            model_name='debt_item',
            name='review_requested_by',
            field=models.ForeignKey(blank=True, help_text='Documents who requested a review for this finding.', null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='debt_review_requested_by', to='dojo.dojo_user', verbose_name='Review Requested By'),
        ),
        migrations.AddField(
            model_name='debt_item',
            name='reviewers',
            field=models.ManyToManyField(blank=True, help_text='Documents who reviewed the flaw.', to='dojo.dojo_user', verbose_name='Reviewers'),
        ),
        migrations.AddField(
            model_name='debt_item',
            name='sonarqube_issue',
            field=models.ForeignKey(blank=True, help_text='The SonarQube issue associated with this finding.', null=True, on_delete=django.db.models.deletion.CASCADE, to='dojo.sonarqube_issue', verbose_name='SonarQube issue'),
        ),
        migrations.AddField(
            model_name='debt_item',
            name='tags',
            field=tagulous.models.fields.TagField(_set_tag_meta=True, blank=True, force_lowercase=True, help_text='Add tags that help describe this debt item. Choose from the list or add new tags. Press Enter key to add.', to='dojo.tagulous_debt_item_tags'),
        ),
        migrations.AddField(
            model_name='debt_item',
            name='test',
            field=models.ForeignKey(editable=False, help_text='The test that is associated with this flaw.', on_delete=django.db.models.deletion.CASCADE, to='dojo.test', verbose_name='Test'),
        ),
        migrations.AddField(
            model_name='debt_endpoint_status',
            name='debt_item',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='debt_status_debt_item', to='dojo.debt_item'),
        ),
        migrations.AddField(
            model_name='debt_endpoint_status',
            name='endpoint',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='debt_status_endpoint', to='dojo.endpoint'),
        ),
        migrations.AddField(
            model_name='debt_endpoint_status',
            name='mitigated_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, to='dojo.dojo_user'),
        ),
        migrations.CreateModel(
            name='Debt_Context_Type_Member',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('debt_context_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dojo.debt_context_type')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dojo.role')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dojo.dojo_user')),
            ],
        ),
        migrations.CreateModel(
            name='Debt_Context_Type_Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('debt_context_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dojo.debt_context_type')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dojo.dojo_group')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dojo.role')),
            ],
        ),
        migrations.AddField(
            model_name='debt_context_type',
            name='authorization_groups',
            field=models.ManyToManyField(blank=True, related_name='debt_context_type_groups', through='dojo.Debt_Context_Type_Group', to='dojo.dojo_group'),
        ),
        migrations.AddField(
            model_name='debt_context_type',
            name='members',
            field=models.ManyToManyField(blank=True, related_name='debt_context_type_members', through='dojo.Debt_Context_Type_Member', to='dojo.dojo_user'),
        ),
        migrations.CreateModel(
            name='Debt_Context_Member',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('debt_context', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dojo.debt_context')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dojo.role')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dojo.dojo_user')),
            ],
        ),
        migrations.CreateModel(
            name='Debt_Context_Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('debt_context', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dojo.debt_context')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dojo.dojo_group')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dojo.role')),
            ],
        ),
        migrations.CreateModel(
            name='Debt_Context_API_Scan_Configuration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service_key_1', models.CharField(blank=True, max_length=200, null=True)),
                ('service_key_2', models.CharField(blank=True, max_length=200, null=True)),
                ('service_key_3', models.CharField(blank=True, max_length=200, null=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dojo.product')),
                ('tool_configuration', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dojo.tool_configuration')),
            ],
        ),
        migrations.AddField(
            model_name='debt_context',
            name='authorization_groups',
            field=models.ManyToManyField(blank=True, related_name='debt_context_groups', through='dojo.Debt_Context_Group', to='dojo.dojo_group'),
        ),
        migrations.AddField(
            model_name='debt_context',
            name='debt_context_manager',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='debt_context_manager', to='dojo.dojo_user'),
        ),
        migrations.AddField(
            model_name='debt_context',
            name='debt_context_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='debt_context_type', to='dojo.debt_context_type'),
        ),
        migrations.AddField(
            model_name='debt_context',
            name='members',
            field=models.ManyToManyField(blank=True, related_name='debt_context_members', through='dojo.Debt_Context_Member', to='dojo.dojo_user'),
        ),
        migrations.AddField(
            model_name='debt_context',
            name='regulations',
            field=models.ManyToManyField(blank=True, to='dojo.regulation'),
        ),
        migrations.AddField(
            model_name='debt_context',
            name='sla_configuration',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.RESTRICT, related_name='debt_sla_config', to='dojo.sla_configuration'),
        ),
        migrations.AddField(
            model_name='debt_context',
            name='tags',
            field=tagulous.models.fields.TagField(_set_tag_meta=True, blank=True, force_lowercase=True, help_text='Add tags that help describe this debt context. Choose from the list or add new tags. Press Enter key to add.', to='dojo.tagulous_debt_context_tags'),
        ),
        migrations.AddField(
            model_name='debt_context',
            name='team_manager',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='debt_team_manager', to='dojo.dojo_user'),
        ),
        migrations.AddField(
            model_name='debt_context',
            name='technical_contact',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='debt_technical_contact', to='dojo.dojo_user'),
        ),
        migrations.AddIndex(
            model_name='debt_item',
            index=models.Index(fields=['test', 'active', 'verified'], name='dojo_debt_i_test_id_500e1f_idx'),
        ),
        migrations.AddIndex(
            model_name='debt_item',
            index=models.Index(fields=['test', 'is_mitigated'], name='dojo_debt_i_test_id_fafa37_idx'),
        ),
        migrations.AddIndex(
            model_name='debt_item',
            index=models.Index(fields=['test', 'duplicate'], name='dojo_debt_i_test_id_7c44ae_idx'),
        ),
        migrations.AddIndex(
            model_name='debt_item',
            index=models.Index(fields=['test', 'out_of_scope'], name='dojo_debt_i_test_id_f1be17_idx'),
        ),
        migrations.AddIndex(
            model_name='debt_item',
            index=models.Index(fields=['test', 'false_p'], name='dojo_debt_i_test_id_ddfe9c_idx'),
        ),
        migrations.AddIndex(
            model_name='debt_item',
            index=models.Index(fields=['test', 'unique_id_from_tool', 'duplicate'], name='dojo_debt_i_test_id_90a5d9_idx'),
        ),
        migrations.AddIndex(
            model_name='debt_item',
            index=models.Index(fields=['test', 'hash_code', 'duplicate'], name='dojo_debt_i_test_id_c85d21_idx'),
        ),
        migrations.AddIndex(
            model_name='debt_item',
            index=models.Index(fields=['test', 'component_name'], name='dojo_debt_i_test_id_7b1ad6_idx'),
        ),
        migrations.AddIndex(
            model_name='debt_item',
            index=models.Index(fields=['cve'], name='dojo_debt_i_cve_b419d0_idx'),
        ),
        migrations.AddIndex(
            model_name='debt_item',
            index=models.Index(fields=['cwe'], name='dojo_debt_i_cwe_448a66_idx'),
        ),
        migrations.AddIndex(
            model_name='debt_item',
            index=models.Index(fields=['out_of_scope'], name='dojo_debt_i_out_of__4709e9_idx'),
        ),
        migrations.AddIndex(
            model_name='debt_item',
            index=models.Index(fields=['false_p'], name='dojo_debt_i_false_p_1382f6_idx'),
        ),
        migrations.AddIndex(
            model_name='debt_item',
            index=models.Index(fields=['verified'], name='dojo_debt_i_verifie_e5b117_idx'),
        ),
        migrations.AddIndex(
            model_name='debt_item',
            index=models.Index(fields=['mitigated'], name='dojo_debt_i_mitigat_faa376_idx'),
        ),
        migrations.AddIndex(
            model_name='debt_item',
            index=models.Index(fields=['active'], name='dojo_debt_i_active_26149f_idx'),
        ),
        migrations.AddIndex(
            model_name='debt_item',
            index=models.Index(fields=['numerical_severity'], name='dojo_debt_i_numeric_c46582_idx'),
        ),
        migrations.AddIndex(
            model_name='debt_item',
            index=models.Index(fields=['date'], name='dojo_debt_i_date_ff374e_idx'),
        ),
        migrations.AddIndex(
            model_name='debt_item',
            index=models.Index(fields=['title'], name='dojo_debt_i_title_977788_idx'),
        ),
        migrations.AddIndex(
            model_name='debt_item',
            index=models.Index(fields=['hash_code'], name='dojo_debt_i_hash_co_c68117_idx'),
        ),
        migrations.AddIndex(
            model_name='debt_item',
            index=models.Index(fields=['unique_id_from_tool'], name='dojo_debt_i_unique__3f8cc1_idx'),
        ),
        migrations.AddIndex(
            model_name='debt_item',
            index=models.Index(fields=['line'], name='dojo_debt_i_line_d73cfe_idx'),
        ),
        migrations.AddIndex(
            model_name='debt_item',
            index=models.Index(fields=['component_name'], name='dojo_debt_i_compone_217729_idx'),
        ),
        migrations.AddIndex(
            model_name='debt_item',
            index=models.Index(fields=['duplicate'], name='dojo_debt_i_duplica_ee36e0_idx'),
        ),
        migrations.AddIndex(
            model_name='debt_item',
            index=models.Index(fields=['is_mitigated'], name='dojo_debt_i_is_miti_295d5c_idx'),
        ),
        migrations.AddIndex(
            model_name='debt_item',
            index=models.Index(fields=['duplicate_debt_item', 'id'], name='dojo_debt_i_duplica_4beb9b_idx'),
        ),
        migrations.AddIndex(
            model_name='debt_endpoint_status',
            index=models.Index(fields=['debt_item', 'mitigated'], name='dojo_debt_e_debt_it_6ef8b8_idx'),
        ),
        migrations.AddIndex(
            model_name='debt_endpoint_status',
            index=models.Index(fields=['endpoint', 'mitigated'], name='dojo_debt_e_endpoin_925c2a_idx'),
        ),
        migrations.AddConstraint(
            model_name='debt_endpoint_status',
            constraint=models.UniqueConstraint(fields=('debt_item', 'endpoint'), name='endpoint-debt_item relation'),
        ),
    ]
